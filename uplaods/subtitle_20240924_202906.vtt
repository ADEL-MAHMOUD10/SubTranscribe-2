WEBVTT

00:00.200 --> 00:03.942
If you want to quickly add subtitles to your videos and take them from this

00:04.086 --> 00:08.158
based on this research, now AI can learn to use digital tools like

00:08.254 --> 00:11.782
to this in few or zero shot settings. When it comes

00:11.806 --> 00:15.766
to natural language processing tasks, you can do it with AssemblyAI

00:15.878 --> 00:19.134
and it's going to be just a couple of lines of code very quick.

00:19.262 --> 00:22.662
Based on your transcription that you submitted to AssemblyAI,

00:22.766 --> 00:26.964
you're going to get time subtitles that you can upload to YouTube

00:27.102 --> 00:30.728
or use on your local computer however you like. The first thing that

00:30.744 --> 00:34.928
you want to do is to make sure that you have the AssemblyAI SDK installed.

00:35.024 --> 00:38.296
And for that all you have to do is go to your terminal and write

00:38.328 --> 00:41.808
down pip install AssemblyAI and that will install the

00:41.864 --> 00:45.208
python SDK of AssemblyAI. And then you want to make sure

00:45.224 --> 00:48.952
that you have a AssemblyAI API key and that is free to get.

00:49.016 --> 00:52.980
So just head on to AssemblyAI.com comma create an account

00:53.120 --> 00:56.200
and you will get a free API key from AssemblyAI.

00:56.620 --> 01:00.760
And then in your python file just import

01:01.460 --> 01:04.812
AssemblyAI as AAI and

01:04.836 --> 01:08.588
then set your AssemblyAI key, the API

01:08.644 --> 01:10.640
key here.

01:12.140 --> 01:15.540
And then you just want to start a transcription

01:15.580 --> 01:19.244
job. So create a transcriber

01:19.292 --> 01:23.620
object. And on that I can start the transcription job.

01:23.920 --> 01:28.616
You can either pass a video or audio file directly to AssemblyAI.

01:28.728 --> 01:32.760
So the video I'm working with in this example is

01:32.800 --> 01:36.368
this one. Can AI learn to use tools?

01:36.504 --> 01:40.720
Well, maybe not physical one, but this is a 4k video and it

01:40.800 --> 01:43.880
is 1.18gb, so it's

01:43.920 --> 01:47.652
going to take some time to be uploaded to AssemblyAI instead.

01:47.776 --> 01:52.040
You can just, if you're on Mac, you can start the quicktime player

01:52.380 --> 01:56.276
and then say file export as audio only

01:56.388 --> 02:00.124
and it will strip the audio of your video. And then

02:00.292 --> 02:03.820
my audio is only 8.7 megabytes, so it's

02:03.860 --> 02:07.268
going to go much faster. So that's why I'm going to pass

02:07.324 --> 02:11.908
the tool former m four a file

02:12.004 --> 02:16.412
to be transcribed. And once the transcription is

02:16.476 --> 02:20.356
ready, all I have to do is to say export subtitles

02:20.428 --> 02:23.908
srt. So this will export the subtitles in the SRT

02:23.964 --> 02:27.508
format if you want. It can also export them in the

02:27.604 --> 02:30.828
VTT format. So I'll use the SRT format

02:30.884 --> 02:34.428
right now. You don't have to pass anything to it, but if you want

02:34.444 --> 02:37.780
to specify how many characters maximum you want on

02:37.820 --> 02:41.394
each caption, you can specify chars

02:41.482 --> 02:45.418
per caption variable. And this is going to be an integer

02:45.594 --> 02:49.122
so we can specify it to be 100 to 50.

02:49.306 --> 02:52.594
I think overall is generally between 81 hundred.

02:52.682 --> 02:56.338
So 50 would be a bit short and 150 would be a

02:56.354 --> 02:59.666
bit long. But we don't have to specify this, we'll just use

02:59.698 --> 03:04.146
a default value. And then I'm just going to open a

03:04.338 --> 03:08.786
file. I'll just call this subtitles srta

03:08.928 --> 03:14.406
with write permission and

03:14.438 --> 03:19.478
then write my subtitles in there and

03:19.494 --> 03:23.078
then close the file. All right,

03:23.214 --> 03:26.886
let's run this and see how it goes. All right, now that this is

03:26.958 --> 03:29.450
done, let's go and take a look.

03:30.790 --> 03:34.526
I can open it with text editor and this is

03:34.598 --> 03:40.142
what it looks like. And this would be as you can see, this is timed

03:40.286 --> 03:43.670
and it will be accepted by anywhere that accepts the SRT

03:43.710 --> 03:47.206
files. You can upload it to YouTube for example with your

03:47.238 --> 03:50.950
video or as far as I know, on the VLC player too. You can

03:50.990 --> 03:54.174
add subtitles on top of a video that you have

03:54.302 --> 03:57.846
and that's how you can get subtitles for your videos.

03:57.958 --> 04:00.422
In just how many lines of code?

04:00.566 --> 04:04.198
12345 lines of code. I mean, just count this as one,

04:04.214 --> 04:07.774
you know, just writing it into file.

04:07.902 --> 04:11.558
So that's it. If you have any questions, make sure to leave them down below

04:11.614 --> 04:14.870
in the comment section. If you want to learn

04:14.910 --> 04:18.814
more about this functionality, you can go to the AssemblyAI

04:18.862 --> 04:22.318
documentation or the SDK documentation on GitHub.

04:22.374 --> 04:25.950
I will make sure to leave links for you in the description below. Thanks for

04:25.990 --> 04:28.330
watching and I will see you in the next video.
