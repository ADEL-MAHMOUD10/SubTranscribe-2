1
00:00:00,200 --> 00:00:03,942
If you want to quickly add subtitles to your videos and take them from this

2
00:00:04,086 --> 00:00:07,766
based on this research, now AI can learn to use digital tools

3
00:00:07,798 --> 00:00:11,182
like to this in few or zero shot settings.

4
00:00:11,286 --> 00:00:15,766
When it comes to natural language processing tasks, you can do it with AssemblyAI

5
00:00:15,878 --> 00:00:19,134
and it's going to be just a couple of lines of code very quick.

6
00:00:19,262 --> 00:00:23,246
Based on your transcription that you submitted to AssemblyAI, you're going

7
00:00:23,278 --> 00:00:26,964
to get time subtitles that you can upload to YouTube

8
00:00:27,102 --> 00:00:30,416
or use on your local computer however you like. The first

9
00:00:30,448 --> 00:00:33,664
thing that you want to do is to make sure that you have the AssemblyAI

10
00:00:33,712 --> 00:00:37,096
SDK installed. And for that all you have to do is go to your

11
00:00:37,128 --> 00:00:40,792
terminal and write down pip install AssemblyAI and

12
00:00:40,816 --> 00:00:44,584
that will install the python SDK of AssemblyAI. And then

13
00:00:44,632 --> 00:00:47,952
you want to make sure that you have a AssemblyAI API key and

14
00:00:47,976 --> 00:00:51,920
that is free to get. So just head on to AssemblyAI.com comma

15
00:00:52,000 --> 00:00:56,200
create an account and you will get a free API key from AssemblyAI.

16
00:00:56,620 --> 00:01:00,760
And then in your python file just import

17
00:01:01,460 --> 00:01:04,996
AssemblyAI as AAI and then

18
00:01:05,028 --> 00:01:08,588
set your AssemblyAI key, the API

19
00:01:08,644 --> 00:01:10,640
key here.

20
00:01:12,140 --> 00:01:16,160
And then you just want to start a transcription job.

21
00:01:17,260 --> 00:01:19,960
So create a transcriber object.

22
00:01:20,920 --> 00:01:25,120
And on that I can start the transcription job. You can either pass

23
00:01:25,200 --> 00:01:29,112
a video or audio file directly to AssemblyAI. So the

24
00:01:29,136 --> 00:01:33,620
video I'm working with in this example is this one.

25
00:01:34,440 --> 00:01:38,280
Can AI learn to use tools? Well, maybe not physical one,

26
00:01:38,400 --> 00:01:42,976
but this is a 4k video and it is 1.18gb,

27
00:01:43,008 --> 00:01:46,848
so it's going to take some time to be uploaded to AssemblyAI

28
00:01:46,984 --> 00:01:50,532
instead. You can just, if you're on Mac, you can

29
00:01:50,596 --> 00:01:54,140
start the quicktime player and then say file

30
00:01:54,300 --> 00:01:58,124
export as audio only and it will strip the audio of

31
00:01:58,172 --> 00:02:03,028
your video. And then my audio is only 8.7

32
00:02:03,084 --> 00:02:06,316
megabytes, so it's going to go much faster. So that's why

33
00:02:06,348 --> 00:02:10,124
I'm going to pass the tool former m four

34
00:02:10,212 --> 00:02:13,292
a file to be transcribed.

35
00:02:13,436 --> 00:02:17,160
And once the transcription is ready,

36
00:02:17,540 --> 00:02:21,236
all I have to do is to say export subtitles srt.

37
00:02:21,348 --> 00:02:24,692
So this will export the subtitles in the SRT format

38
00:02:24,836 --> 00:02:28,276
if you want. It can also export them in the VTT

39
00:02:28,348 --> 00:02:31,444
format. So I'll use the SRT format right now.

40
00:02:31,532 --> 00:02:35,140
You don't have to pass anything to it, but if you want to specify

41
00:02:35,220 --> 00:02:38,804
how many characters maximum you want on each caption,

42
00:02:38,932 --> 00:02:42,826
you can specify chars per caption

43
00:02:42,898 --> 00:02:46,282
variable. And this is going to be an integer so we

44
00:02:46,306 --> 00:02:50,058
can specify it to be 100 to 50. I think

45
00:02:50,194 --> 00:02:53,602
overall is generally between 81 hundred. So 50 would

46
00:02:53,626 --> 00:02:57,110
be a bit short and 150 would be a bit long.

47
00:02:57,490 --> 00:03:00,790
But we don't have to specify this, we'll just use a default value.

48
00:03:01,130 --> 00:03:05,258
And then I'm just going to open a file.

49
00:03:05,434 --> 00:03:09,610
I'll just call this subtitles srta with

50
00:03:09,910 --> 00:03:14,406
write permission and

51
00:03:14,438 --> 00:03:19,478
then write my subtitles in there and

52
00:03:19,494 --> 00:03:23,078
then close the file. All right,

53
00:03:23,214 --> 00:03:26,518
let's run this and see how it goes. All right, now that this

54
00:03:26,574 --> 00:03:29,450
is done, let's go and take a look.

55
00:03:30,790 --> 00:03:34,526
I can open it with text editor and this is

56
00:03:34,598 --> 00:03:38,370
what it looks like. And this would be as you can see, this is

57
00:03:39,190 --> 00:03:42,862
timed and it will be accepted by anywhere that

58
00:03:42,886 --> 00:03:46,342
accepts the SRT files. You can upload it to YouTube for

59
00:03:46,366 --> 00:03:49,982
example with your video or as far as I know, on the VLC

60
00:03:50,046 --> 00:03:53,670
player too. You can add subtitles on top of a video that you

61
00:03:53,710 --> 00:03:57,022
have and that's how you can get subtitles for

62
00:03:57,046 --> 00:04:00,422
your videos. In just how many lines of code?

63
00:04:00,566 --> 00:04:04,198
12345 lines of code. I mean, just count this as one,

64
00:04:04,214 --> 00:04:07,774
you know, just writing it into file.

65
00:04:07,902 --> 00:04:11,254
So that's it. If you have any questions, make sure to leave them down

66
00:04:11,302 --> 00:04:14,414
below in the comment section. If you

67
00:04:14,422 --> 00:04:17,558
want to learn more about this functionality, you can go

68
00:04:17,574 --> 00:04:21,598
to the AssemblyAI documentation or the SDK documentation

69
00:04:21,694 --> 00:04:25,302
on GitHub. I will make sure to leave links for you in the description below.

70
00:04:25,446 --> 00:04:28,330
Thanks for watching and I will see you in the next video.

