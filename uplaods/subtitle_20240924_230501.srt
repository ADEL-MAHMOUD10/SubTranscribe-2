1
00:00:00,200 --> 00:00:03,942
If you want to quickly add subtitles to your videos and take them from this

2
00:00:04,086 --> 00:00:07,766
based on this research, now AI can learn to use digital tools

3
00:00:07,798 --> 00:00:11,182
like to this in few or zero shot settings.

4
00:00:11,286 --> 00:00:15,766
When it comes to natural language processing tasks, you can do it with AssemblyAI

5
00:00:15,878 --> 00:00:19,134
and it's going to be just a couple of lines of code very quick.

6
00:00:19,262 --> 00:00:23,246
Based on your transcription that you submitted to AssemblyAI, you're going

7
00:00:23,278 --> 00:00:27,376
to get time subtitles that you can upload to YouTube or

8
00:00:27,408 --> 00:00:30,984
use on your local computer however you like. The first thing that you want

9
00:00:30,992 --> 00:00:34,928
to do is to make sure that you have the AssemblyAI SDK installed.

10
00:00:35,024 --> 00:00:38,296
And for that all you have to do is go to your terminal and write

11
00:00:38,328 --> 00:00:41,808
down pip install AssemblyAI and that will install the

12
00:00:41,864 --> 00:00:45,208
python SDK of AssemblyAI. And then you want to make sure

13
00:00:45,224 --> 00:00:48,496
that you have a AssemblyAI API key and that is free

14
00:00:48,528 --> 00:00:51,920
to get. So just head on to AssemblyAI.com comma

15
00:00:52,000 --> 00:00:56,200
create an account and you will get a free API key from AssemblyAI.

16
00:00:56,620 --> 00:00:59,916
And then in your python file just

17
00:01:00,068 --> 00:01:03,880
import AssemblyAI as AAI

18
00:01:04,500 --> 00:01:07,240
and then set your AssemblyAI key,

19
00:01:07,660 --> 00:01:10,640
the API key here.

20
00:01:12,140 --> 00:01:16,160
And then you just want to start a transcription job.

21
00:01:17,260 --> 00:01:19,960
So create a transcriber object.

22
00:01:20,920 --> 00:01:24,424
And on that I can start the transcription job. You can

23
00:01:24,472 --> 00:01:28,616
either pass a video or audio file directly to AssemblyAI.

24
00:01:28,728 --> 00:01:32,760
So the video I'm working with in this example is

25
00:01:32,800 --> 00:01:36,368
this one. Can AI learn to use tools?

26
00:01:36,504 --> 00:01:39,840
Well, maybe not physical one, but this is a 4k video

27
00:01:39,920 --> 00:01:42,976
and it is 1.18gb,

28
00:01:43,008 --> 00:01:46,848
so it's going to take some time to be uploaded to AssemblyAI

29
00:01:46,984 --> 00:01:50,532
instead. You can just, if you're on Mac, you can

30
00:01:50,596 --> 00:01:54,796
start the quicktime player and then say file export

31
00:01:54,868 --> 00:01:58,476
as audio only and it will strip the audio of your

32
00:01:58,548 --> 00:02:03,028
video. And then my audio is only 8.7

33
00:02:03,084 --> 00:02:06,516
megabytes, so it's going to go much faster. So that's why I'm

34
00:02:06,548 --> 00:02:09,740
going to pass the tool former m

35
00:02:09,780 --> 00:02:13,292
four a file to be transcribed.

36
00:02:13,436 --> 00:02:17,160
And once the transcription is ready,

37
00:02:17,540 --> 00:02:21,236
all I have to do is to say export subtitles srt.

38
00:02:21,348 --> 00:02:24,692
So this will export the subtitles in the SRT format

39
00:02:24,836 --> 00:02:28,276
if you want. It can also export them in the VTT

40
00:02:28,348 --> 00:02:31,444
format. So I'll use the SRT format right now.

41
00:02:31,532 --> 00:02:35,140
You don't have to pass anything to it, but if you want to specify

42
00:02:35,220 --> 00:02:38,804
how many characters maximum you want on each caption,

43
00:02:38,932 --> 00:02:42,826
you can specify chars per caption

44
00:02:42,898 --> 00:02:46,026
variable. And this is going to be an integer so

45
00:02:46,098 --> 00:02:49,122
we can specify it to be 100 to 50.

46
00:02:49,306 --> 00:02:52,594
I think overall is generally between 81 hundred.

47
00:02:52,682 --> 00:02:56,082
So 50 would be a bit short and 150 would

48
00:02:56,106 --> 00:02:59,818
be a bit long. But we don't have to specify this, we'll just use a

49
00:02:59,834 --> 00:03:04,146
default value. And then I'm just going to open a

50
00:03:04,338 --> 00:03:08,786
file. I'll just call this subtitles srta

51
00:03:08,928 --> 00:03:14,406
with write permission and

52
00:03:14,438 --> 00:03:19,478
then write my subtitles in there and

53
00:03:19,494 --> 00:03:23,078
then close the file. All right,

54
00:03:23,214 --> 00:03:26,886
let's run this and see how it goes. All right, now that this is

55
00:03:26,958 --> 00:03:29,450
done, let's go and take a look.

56
00:03:30,790 --> 00:03:34,206
I can open it with text editor and this

57
00:03:34,238 --> 00:03:37,550
is what it looks like. And this would be as you can see,

58
00:03:37,590 --> 00:03:40,926
this is timed and it will

59
00:03:40,958 --> 00:03:44,450
be accepted by anywhere that accepts the SRT files.

60
00:03:44,910 --> 00:03:48,718
You can upload it to YouTube for example with your video or as

61
00:03:48,734 --> 00:03:52,486
far as I know, on the VLC player too. You can add subtitles on top

62
00:03:52,518 --> 00:03:56,318
of a video that you have and that's how you can get

63
00:03:56,374 --> 00:03:59,822
subtitles for your videos. In just how many lines of

64
00:03:59,846 --> 00:04:03,150
code? 12345 lines of code. I mean,

65
00:04:03,190 --> 00:04:06,902
just count this as one, you know, just writing it into

66
00:04:07,046 --> 00:04:09,990
file. So that's it. If you have any questions,

67
00:04:10,070 --> 00:04:12,930
make sure to leave them down below in the comment section.

68
00:04:14,030 --> 00:04:17,558
If you want to learn more about this functionality, you can go

69
00:04:17,574 --> 00:04:21,598
to the AssemblyAI documentation or the SDK documentation

70
00:04:21,694 --> 00:04:25,302
on GitHub. I will make sure to leave links for you in the description below.

71
00:04:25,446 --> 00:04:28,330
Thanks for watching and I will see you in the next video.

